#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
"""
import time
import pandas as pd
import numpy as np
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from src.core.infer_news_to_candles import infer_news_to_candles_df
from src.core.infer_news_to_candles_optimized import infer_news_to_candles_df_optimized


def create_test_data(num_news: int = 1000, num_candles: int = 500):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    np.random.seed(42)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    news_data = []
    publications = ['–†–ë–ö', '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç', '–í–µ–¥–æ–º–æ—Å—Ç–∏', '–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å', '–¢–ê–°–°']
    titles = [
        '–°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–æ—Å—Ç–µ –ø—Ä–∏–±—ã–ª–∏',
        '–ì–∞–∑–ø—Ä–æ–º —É–≤–µ–ª–∏—á–∏–ª –¥–æ–±—ã—á—É –≥–∞–∑–∞',
        '–õ—É–∫–æ–π–ª –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
        '–ù–õ–ú–ö –ø–æ–≤—ã—Å–∏–ª —Ü–µ–Ω—ã –Ω–∞ –º–µ—Ç–∞–ª–ª',
        '–ú–¢–° —Ä–∞—Å—à–∏—Ä—è–µ—Ç —Å–µ—Ç—å 5G'
    ]
    
    for i in range(num_news):
        news_data.append({
            'publish_date': f'2024-01-{(i % 30) + 1:02d}',
            'title': np.random.choice(titles),
            'publication': np.random.choice(publications)
        })
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–≤–µ—á–∏
    candles_data = []
    tickers = ['SBER', 'GAZP', 'LKOH', 'NLMK', 'MTSS']
    
    for i in range(num_candles):
        candles_data.append({
            'begin': f'2024-01-{(i % 30) + 1:02d} 10:00:00',
            'ticker': np.random.choice(tickers),
            'open': 100 + np.random.randn() * 10,
            'high': 110 + np.random.randn() * 10,
            'low': 90 + np.random.randn() * 10,
            'close': 105 + np.random.randn() * 10,
            'volume': np.random.randint(1000, 10000)
        })
    
    return pd.DataFrame(news_data), pd.DataFrame(candles_data)


def benchmark_function(func, df_news, df_candles, artifacts_dir, **kwargs):
    """–ë–µ–Ω—á–º–∞—Ä–∫ —Ñ—É–Ω–∫—Ü–∏–∏"""
    start_time = time.time()
    try:
        result = func(df_news, df_candles, artifacts_dir, **kwargs)
        end_time = time.time()
        return end_time - start_time, result, None
    except Exception as e:
        end_time = time.time()
        return end_time - start_time, None, str(e)


def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    df_news, df_candles = create_test_data(num_news=1000, num_candles=500)
    
    artifacts_dir = "artifacts"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    import os
    if not os.path.exists(artifacts_dir):
        print(f"‚ùå –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {artifacts_dir}")
        return
    
    print(f"üìà –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df_news)} –Ω–æ–≤–æ—Å—Ç–µ–π, {len(df_candles)} —Å–≤–µ—á–µ–π")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    params = {
        'p_threshold': 0.5,
        'half_life_days': 2.0,
        'max_days': 10.0
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
    original_time, original_result, original_error = benchmark_function(
        infer_news_to_candles_df, df_news, df_candles, artifacts_dir, **params
    )
    
    if original_error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {original_error}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
    optimized_time, optimized_result, optimized_error = benchmark_function(
        infer_news_to_candles_df_optimized, df_news, df_candles, artifacts_dir, **params
    )
    
    if optimized_error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {optimized_error}")
        return
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {original_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {optimized_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if original_time > 0:
        speedup = original_time / optimized_time
        print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
        print(f"üíæ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {((original_time - optimized_time) / original_time * 100):.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if original_result and optimized_result:
        orig_features, orig_joined = original_result
        opt_features, opt_joined = optimized_result
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏:")
        print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏: {len(orig_features)} —Å—Ç—Ä–æ–∫")
        print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏—á–∏: {len(opt_features)} —Å—Ç—Ä–æ–∫")
        print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ: {len(orig_joined)} —Å—Ç—Ä–æ–∫")
        print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ: {len(opt_joined)} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
        if len(orig_features) == len(opt_features) and len(orig_features) > 0:
            feature_cols = ['nn_news_sum', 'nn_news_mean', 'nn_news_max', 'nn_news_count']
            max_diff = 0
            for col in feature_cols:
                if col in orig_features.columns and col in opt_features.columns:
                    diff = np.abs(orig_features[col] - opt_features[col]).max()
                    max_diff = max(max_diff, diff)
            
            print(f"üìê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ —Ñ–∏—á–∞—Ö: {max_diff:.6f}")
            
            if max_diff < 1e-5:
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–∏—Å–ª–µ–Ω–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!")
            else:
                print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
