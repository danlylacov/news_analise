#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–∏
"""
import time
import pandas as pd
import numpy as np
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from src.core.infer_news_to_candles import infer_news_to_candles_df
from src.core.infer_news_to_candles_optimized import infer_news_to_candles_df_optimized
from src.core.infer_news_to_candles_ultra_optimized import infer_news_to_candles_df_ultra_optimized


def create_large_test_data(num_news: int = 2000, num_candles: int = 1000):
    """–°–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    np.random.seed(42)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    news_data = []
    publications = ['–†–ë–ö', '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç', '–í–µ–¥–æ–º–æ—Å—Ç–∏', '–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å', '–¢–ê–°–°', '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏']
    titles = [
        '–°–±–µ—Ä–±–∞–Ω–∫ –æ–±—ä—è–≤–∏–ª –æ —Ä–æ—Å—Ç–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 15%',
        '–ì–∞–∑–ø—Ä–æ–º —É–≤–µ–ª–∏—á–∏–ª –¥–æ–±—ã—á—É –≥–∞–∑–∞ –≤ –ê—Ä–∫—Ç–∏–∫–µ',
        '–õ—É–∫–æ–π–ª –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –°–∏–±–∏—Ä–∏',
        '–ù–õ–ú–ö –ø–æ–≤—ã—Å–∏–ª —Ü–µ–Ω—ã –Ω–∞ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç',
        '–ú–¢–° —Ä–∞—Å—à–∏—Ä—è–µ—Ç —Å–µ—Ç—å 5G –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö',
        '–í–¢–ë –æ—Ç–∫—Ä—ã–ª –Ω–æ–≤—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –≤ –ú–æ—Å–∫–≤–µ',
        '–†–æ—Å–Ω–µ—Ñ—Ç—å —É–≤–µ–ª–∏—á–∏–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ—Ñ—Ç–∏',
        '–ù–æ–≤–∞—Ç—ç–∫ –∑–∞–ø—É—Å—Ç–∏–ª –Ω–æ–≤—ã–π –∑–∞–≤–æ–¥ –°–ü–ì'
    ]
    
    for i in range(num_news):
        news_data.append({
            'publish_date': f'2024-01-{(i % 30) + 1:02d}',
            'title': np.random.choice(titles),
            'publication': np.random.choice(publications)
        })
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–≤–µ—á–∏
    candles_data = []
    tickers = ['SBER', 'GAZP', 'LKOH', 'NLMK', 'MTSS', 'VTBR', 'ROSN', 'NVTK']
    
    for i in range(num_candles):
        candles_data.append({
            'begin': f'2024-01-{(i % 30) + 1:02d} 10:00:00',
            'ticker': np.random.choice(tickers),
            'open': 100 + np.random.randn() * 10,
            'high': 110 + np.random.randn() * 10,
            'low': 90 + np.random.randn() * 10,
            'close': 105 + np.random.randn() * 10,
            'volume': np.random.randint(1000, 10000)
        })
    
    return pd.DataFrame(news_data), pd.DataFrame(candles_data)


def benchmark_function(func, df_news, df_candles, artifacts_dir, version_name, **kwargs):
    """–ë–µ–Ω—á–º–∞—Ä–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {version_name}...")
    
    # –ü—Ä–æ–≥—Ä–µ–≤ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
    try:
        func(df_news.head(100), df_candles.head(50), artifacts_dir, **kwargs)
    except:
        pass
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    start_time = time.time()
    try:
        result = func(df_news, df_candles, artifacts_dir, **kwargs)
        end_time = time.time()
        return end_time - start_time, result, None
    except Exception as e:
        end_time = time.time()
        return end_time - start_time, None, str(e)


def compare_results(results):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
    print("\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —É—Å–ø–µ—à–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω
    reference_result = None
    reference_name = None
    
    for name, (time, result, error) in results.items():
        if result is not None:
            reference_result = result
            reference_name = name
            break
    
    if reference_result is None:
        print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    ref_features, ref_joined = reference_result
    
    for name, (time, result, error) in results.items():
        if result is None:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ - {error}")
            continue
        
        features, joined = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        size_match = (len(features) == len(ref_features)) and (len(joined) == len(ref_joined))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
        max_diff = 0
        if len(features) == len(ref_features) and len(features) > 0:
            feature_cols = ['nn_news_sum', 'nn_news_mean', 'nn_news_max', 'nn_news_count']
            for col in feature_cols:
                if col in features.columns and col in ref_features.columns:
                    diff = np.abs(features[col] - ref_features[col]).max()
                    max_diff = max(max_diff, diff)
        
        accuracy_status = "‚úÖ –ò–¥–µ–Ω—Ç–∏—á–Ω—ã" if max_diff < 1e-5 else f"‚ö†Ô∏è  –†–∞–∑–Ω–æ—Å—Ç—å: {max_diff:.6f}"
        size_status = "‚úÖ –°–æ–≤–ø–∞–¥–∞—é—Ç" if size_match else "‚ùå –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã"
        
        print(f"üìä {name}:")
        print(f"   –í—Ä–µ–º—è: {time:.2f}—Å")
        print(f"   –†–∞–∑–º–µ—Ä—ã: {size_status}")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy_status}")


def main():
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    df_news, df_candles = create_large_test_data(num_news=2000, num_candles=1000)
    
    artifacts_dir = "artifacts"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    import os
    if not os.path.exists(artifacts_dir):
        print(f"‚ùå –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {artifacts_dir}")
        return
    
    print(f"üìà –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df_news)} –Ω–æ–≤–æ—Å—Ç–µ–π, {len(df_candles)} —Å–≤–µ—á–µ–π")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    params = {
        'p_threshold': 0.5,
        'half_life_days': 2.0,
        'max_days': 10.0
    }
    
    # –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    versions = [
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è", infer_news_to_candles_df),
        ("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", infer_news_to_candles_df_optimized),
        ("–£–ª—å—Ç—Ä–∞-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", infer_news_to_candles_df_ultra_optimized),
    ]
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏
    for version_name, version_func in versions:
        time_taken, result, error = benchmark_function(
            version_func, df_news, df_candles, artifacts_dir, version_name, **params
        )
        results[version_name] = (time_taken, result, error)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 60)
    
    successful_results = []
    for name, (time, result, error) in results.items():
        if result is not None:
            successful_results.append((name, time))
            print(f"‚úÖ {name}: {time:.2f} —Å–µ–∫—É–Ω–¥")
        else:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ - {error}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if len(successful_results) > 1:
        print("\n‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("=" * 60)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        successful_results.sort(key=lambda x: x[1])
        fastest_time = successful_results[0][1]
        
        for name, time in successful_results:
            speedup = time / fastest_time
            improvement = ((time - fastest_time) / time * 100) if time > fastest_time else 0
            status = "üèÜ –õ—É—á—à–∞—è" if time == fastest_time else f"üìà –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ {improvement:.1f}%"
            print(f"{name}: {time:.2f}—Å (x{speedup:.2f}) - {status}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    compare_results(results)
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ª—å—Ç—Ä–∞-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("2. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏")
    print("3. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ batch_size –º–æ–∂–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")


if __name__ == "__main__":
    main()
