#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ API –≤ CSV —Ñ–æ—Ä–º–∞—Ç
"""

import json
import pandas as pd
import argparse
import os
from datetime import datetime

def json_to_csv(json_file_path, output_dir=None):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JSON —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ API –≤ CSV —Ñ–∞–π–ª—ã
    
    Args:
        json_file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–∞ –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(json_file_path):
        print(f"‚ùå –§–∞–π–ª {json_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if output_dir is None:
        output_dir = os.path.dirname(json_file_path) or '.'
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)
    
    print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª: {json_file_path}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        with open(json_file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
        print(f"üìä –°—Ç—Ä–æ–∫ –≤ —Ñ–∏—á–∞—Ö: {data.get('rows_features', 0)}")
        print(f"üìä –°—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {data.get('rows_joined', 0)}")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        base_name = os.path.splitext(os.path.basename(json_file_path))[0]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º features_preview –≤ CSV
        if data.get('features_preview'):
            print(f"\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º features_preview –≤ CSV...")
            
            features_df = pd.DataFrame(data['features_preview'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            features_df['source_file'] = os.path.basename(json_file_path)
            features_df['export_timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            features_csv_path = os.path.join(output_dir, f"{base_name}_features.csv")
            features_df.to_csv(features_csv_path, index=False, encoding='utf-8')
            
            print(f"‚úÖ Features —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {features_csv_path}")
            print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(features_df.columns)}")
            print(f"   –°—Ç—Ä–æ–∫: {len(features_df)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç-–∫–æ–ª–æ–Ω–∫–∞–º
            sentiment_cols = [col for col in features_df.columns if 'sentiment' in col]
            if sentiment_cols:
                print(f"   –°–µ–Ω—Ç–∏–º–µ–Ω—Ç-–∫–æ–ª–æ–Ω–∫–∏: {sentiment_cols}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç—É
                if 'sentiment_mean' in features_df.columns:
                    sentiment_stats = features_df['sentiment_mean'].describe()
                    print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞:")
                    print(f"     –°—Ä–µ–¥–Ω–µ–µ: {sentiment_stats['mean']:.3f}")
                    print(f"     –ú–∏–Ω: {sentiment_stats['min']:.3f}")
                    print(f"     –ú–∞–∫—Å: {sentiment_stats['max']:.3f}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º joined_preview –≤ CSV
        if data.get('joined_preview'):
            print(f"\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º joined_preview –≤ CSV...")
            
            joined_df = pd.DataFrame(data['joined_preview'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            joined_df['source_file'] = os.path.basename(json_file_path)
            joined_df['export_timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            joined_csv_path = os.path.join(output_dir, f"{base_name}_joined.csv")
            joined_df.to_csv(joined_csv_path, index=False, encoding='utf-8')
            
            print(f"‚úÖ Joined –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {joined_csv_path}")
            print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(joined_df.columns)}")
            print(f"   –°—Ç—Ä–æ–∫: {len(joined_df)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            if 'ticker' in joined_df.columns:
                ticker_counts = joined_df['ticker'].value_counts()
                print(f"   –¢–∏–∫–µ—Ä—ã: {dict(ticker_counts)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        print(f"\nüìã –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        summary_data = {
            'source_file': [os.path.basename(json_file_path)],
            'export_timestamp': [datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
            'api_status': [data.get('status', 'unknown')],
            'rows_features': [data.get('rows_features', 0)],
            'rows_joined': [data.get('rows_joined', 0)],
            'has_features': [bool(data.get('features_preview'))],
            'has_joined': [bool(data.get('joined_preview'))],
            'features_columns': [len(data['features_preview'][0]) if data.get('features_preview') else 0],
            'joined_columns': [len(data['joined_preview'][0]) if data.get('joined_preview') else 0]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑–µ
        if data.get('features_preview'):
            features_df = pd.DataFrame(data['features_preview'])
            sentiment_cols = [col for col in features_df.columns if 'sentiment' in col]
            summary_data['sentiment_columns'] = [len(sentiment_cols)]
            summary_data['has_sentiment'] = [len(sentiment_cols) > 0]
            
            if sentiment_cols:
                summary_data['avg_sentiment'] = [features_df['sentiment_mean'].mean() if 'sentiment_mean' in features_df.columns else 0]
        else:
            summary_data['sentiment_columns'] = [0]
            summary_data['has_sentiment'] = [False]
            summary_data['avg_sentiment'] = [0]
        
        summary_df = pd.DataFrame(summary_data)
        summary_csv_path = os.path.join(output_dir, f"{base_name}_summary.csv")
        summary_df.to_csv(summary_csv_path, index=False, encoding='utf-8')
        
        print(f"‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {summary_csv_path}")
        
        print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {output_dir}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ API –≤ CSV')
    parser.add_argument('json_file', help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
    parser.add_argument('--output-dir', '-o', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--batch', '-b', action='store_true', help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
    
    args = parser.parse_args()
    
    if args.batch:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        json_dir = os.path.dirname(args.json_file) if os.path.isfile(args.json_file) else args.json_file
        json_files = [f for f in os.listdir(json_dir) if f.endswith('.json')]
        
        print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        for json_file in json_files:
            json_path = os.path.join(json_dir, json_file)
            print(f"\n{'='*60}")
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {json_file}")
            print(f"{'='*60}")
            json_to_csv(json_path, args.output_dir)
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª
        json_to_csv(args.json_file, args.output_dir)

if __name__ == "__main__":
    main()
