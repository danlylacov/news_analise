#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ –∫–æ–¥–µ –ø–æ—Å–ª–µ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""
import os
import re
from pathlib import Path

def update_imports_in_file(file_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        replacements = [
            # Core –º–æ–¥—É–ª–∏
            (r'from news_nlp import', 'from src.core.news_nlp import'),
            (r'from news_features import', 'from src.core.news_features import'),
            (r'from auto_label_tickers import', 'from src.core.auto_label_tickers import'),
            (r'from infer_news_to_candles import', 'from src.core.infer_news_to_candles import'),
            
            # ML –º–æ–¥—É–ª–∏
            (r'from nn_model import', 'from src.ml.nn_model import'),
            (r'from nn_data import', 'from src.ml.nn_data import'),
            
            # API –º–æ–¥—É–ª–∏
            (r'from app import', 'from src.api.app import'),
        ]
        
        for pattern, replacement in replacements:
            content = re.sub(pattern, replacement, content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        file_replacements = [
            (r'"test_news\.csv"', '"datasets/raw/test_news.csv"'),
            (r'"public_test_candles\.csv"', '"datasets/raw/public_test_candles.csv"'),
            (r'"train_news\.csv"', '"datasets/raw/train_news.csv"'),
            (r'"train_candles\.csv"', '"datasets/raw/train_candles.csv"'),
            (r'"artifacts/"', '"artifacts/"'),  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            (r'"full_swagger_data\.json"', '"examples/json_samples/full_swagger_data.json"'),
            (r'"full_swagger_data_fixed\.json"', '"examples/json_samples/full_swagger_data_fixed.json"'),
            (r'"synchronized_swagger_data\.json"', '"examples/json_samples/synchronized_swagger_data.json"'),
        ]
        
        for pattern, replacement in file_replacements:
            content = re.sub(pattern, replacement, content)
        
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
            return True
        else:
            print(f"‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")
        return False

def update_all_files():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    updated_files = []
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ src/
    for root, dirs, files in os.walk('src'):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                if update_imports_in_file(file_path):
                    updated_files.append(file_path)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    for root, dirs, files in os.walk('tests'):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                if update_imports_in_file(file_path):
                    updated_files.append(file_path)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ç–∏–ª–∏—Ç—ã
    for root, dirs, files in os.walk('src/utils'):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                if update_imports_in_file(file_path):
                    updated_files.append(file_path)
    
    print(f"\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(updated_files)}")
    for file in updated_files:
        print(f"  - {file}")

if __name__ == "__main__":
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –≤ –∫–æ–¥–µ...")
    update_all_files()
    print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
