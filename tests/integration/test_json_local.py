#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç JSON API –±–µ–∑ Docker
"""
import json
import requests
import pandas as pd
from datetime import datetime

def test_json_api_local():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º JSON API –ª–æ–∫–∞–ª—å–Ω–æ"""
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('swagger_test_data.json', 'r', encoding='utf-8') as f:
        test_data = json.load(f)
    
    print("=== –¢–ï–°–¢ JSON API ===")
    print(f"–ù–æ–≤–æ—Å—Ç–µ–π: {len(test_data['news'])}")
    print(f"–°–≤–µ—á–µ–π: {len(test_data['candles'])}")
    print(f"–¢–∏–∫–µ—Ä—ã: {set(c['ticker'] for c in test_data['candles'])}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ URL
    urls_to_test = [
        "http://localhost:8000/infer",
        "http://127.0.0.1:8000/infer", 
        "http://176.57.217.27:8000/infer"
    ]
    
    for url in urls_to_test:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º {url} ---")
        try:
            response = requests.post(url, json=test_data, timeout=30)
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –£—Å–ø–µ—Ö!")
                print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {result.get('status', 'unknown')}")
                print(f"–°—Ç—Ä–æ–∫ —Å —Ñ–∏—á–∞–º–∏: {result.get('rows_features', 0)}")
                print(f"–°—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º: {result.get('rows_joined', 0)}")
                
                if result.get('features_preview'):
                    print(f"\n–ü—Ä–∏–º–µ—Ä —Ñ–∏—á (–ø–µ—Ä–≤—ã–µ 3):")
                    for i, feat in enumerate(result['features_preview'][:3]):
                        print(f"  {i+1}. {feat}")
                
                if result.get('joined_preview'):
                    print(f"\n–ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3):")
                    for i, row in enumerate(result['joined_preview'][:3]):
                        print(f"  {i+1}. {row}")
                        
                return True  # –£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
                
        except requests.exceptions.ConnectionError:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        except requests.exceptions.Timeout:
            print("‚ùå –¢–∞–π–º–∞—É—Ç - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return False

def test_health_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoints"""
    urls_to_test = [
        "http://localhost:8000/health",
        "http://127.0.0.1:8000/health",
        "http://176.57.217.27:8000/health"
    ]
    
    print("\n=== –¢–ï–°–¢ HEALTH ENDPOINTS ===")
    for url in urls_to_test:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º {url} ---")
        try:
            response = requests.post(url, timeout=10)
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Health check: {result}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    test_health_endpoints()
    success = test_json_api_local()
    
    if success:
        print("\nüéâ JSON API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è JSON API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä (uvicorn app:app --host 0.0.0.0 --port 8000)")
        print("2. –î–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –ø–∞–ø–∫–µ artifacts/")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
