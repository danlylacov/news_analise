#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç full_swagger_data.json
"""
import json
import requests
import pandas as pd
from datetime import datetime

def test_full_json_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π JSON —Ñ–∞–π–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API"""
    
    print("=== –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û JSON –§–ê–ô–õ–ê ===")
    
    # –ß–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π JSON —Ñ–∞–π–ª
    with open('examples/json_samples/full_swagger_data.json', 'r', encoding='utf-8') as f:
        full_data = json.load(f)
    
    print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"  –ù–æ–≤–æ—Å—Ç–µ–π: {len(full_data['news'])}")
    print(f"  –°–≤–µ—á–µ–π: {len(full_data['candles'])}")
    print(f"  –¢–∏–∫–µ—Ä–æ–≤: {len(set(c['ticker'] for c in full_data['candles']))}")
    print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: p_threshold={full_data['p_threshold']}, half_life_days={full_data['half_life_days']}, max_days={full_data['max_days']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüì∞ –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏:")
    news_example = full_data['news'][0]
    print(f"  –î–∞—Ç–∞: {news_example['publish_date']}")
    print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_example['title'][:100]}...")
    print(f"  –ò–∑–¥–∞–Ω–∏–µ: {news_example['publication'][:50]}...")
    
    print(f"\nüìà –ü—Ä–∏–º–µ—Ä —Å–≤–µ—á–∏:")
    candle_example = full_data['candles'][0]
    print(f"  –î–∞—Ç–∞: {candle_example['begin']}")
    print(f"  –¢–∏–∫–µ—Ä: {candle_example['ticker']}")
    print(f"  OHLCV: {candle_example['open']}/{candle_example['high']}/{candle_example['low']}/{candle_example['close']}/{candle_example['volume']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    print(f"\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API...")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL
    urls_to_test = [
        "http://188.225.74.138:8000/infer"
    ]
    
    for url in urls_to_test:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º {url} ---")
        try:
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            response = requests.post(url, json=full_data)
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –£–°–ü–ï–•!")
                print(f"\nüìã –ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API:")
                print(f"  –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
                print(f"  –°—Ç—Ä–æ–∫ —Å —Ñ–∏—á–∞–º–∏: {result.get('rows_features', 0)}")
                print(f"  –°—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º: {result.get('rows_joined', 0)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_filename = f"api_response_{timestamp}.json"
                
                with open(output_filename, 'w', encoding='utf-8') as f:
                    json.dump(result, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_filename}")
                
                if result.get('features_preview'):
                    print(f"\nüîç –ü—Ä–∏–º–µ—Ä —Ñ–∏—á (–ø–µ—Ä–≤—ã–µ 5):")
                    for i, feat in enumerate(result['features_preview'][:5]):
                        print(f"  {i+1}. –¢–∏–∫–µ—Ä: {feat.get('ticker', 'N/A')}, –î–∞—Ç–∞: {feat.get('date', 'N/A')}")
                        print(f"     nn_news_sum: {feat.get('nn_news_sum', 0):.4f}")
                        print(f"     nn_news_mean: {feat.get('nn_news_mean', 0):.4f}")
                        print(f"     nn_news_max: {feat.get('nn_news_max', 0):.4f}")
                        print(f"     nn_news_count: {feat.get('nn_news_count', 0)}")
                        print()
                
                if result.get('joined_preview'):
                    print(f"\nüîó –ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3):")
                    for i, row in enumerate(result['joined_preview'][:3]):
                        print(f"  {i+1}. –¢–∏–∫–µ—Ä: {row.get('ticker', 'N/A')}, –î–∞—Ç–∞: {row.get('begin', 'N/A')}")
                        print(f"     –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {row.get('close', 'N/A')}")
                        print(f"     –û–±—ä–µ–º: {row.get('volume', 'N/A')}")
                        print(f"     nn_news_sum: {row.get('nn_news_sum', 0):.4f}")
                        print(f"     nn_news_count: {row.get('nn_news_count', 0)}")
                        print()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                if result.get('features_preview'):
                    features = result['features_preview']
                    non_zero_features = [f for f in features if f.get('nn_news_sum', 0) > 0]
                    print(f"  –§–∏—á —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {len(non_zero_features)} –∏–∑ {len(features)}")
                    
                    if non_zero_features:
                        max_sum = max(f.get('nn_news_sum', 0) for f in non_zero_features)
                        max_count = max(f.get('nn_news_count', 0) for f in non_zero_features)
                        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–ª–∏—è–Ω–∏—è: {max_sum:.4f}")
                        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {max_count}")
                
                return True
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                error_filename = f"api_error_{timestamp}.json"
                
                error_data = {
                    "timestamp": timestamp,
                    "url": url,
                    "status_code": response.status_code,
                    "error_text": response.text,
                    "request_data_summary": {
                        "news_count": len(full_data['news']),
                        "candles_count": len(full_data['candles']),
                        "parameters": {
                            "p_threshold": full_data['p_threshold'],
                            "half_life_days": full_data['half_life_days'],
                            "max_days": full_data['max_days']
                        }
                    }
                }
                
                with open(error_filename, 'w', encoding='utf-8') as f:
                    json.dump(error_data, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {error_filename}")
                
        except requests.exceptions.ConnectionError:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            error_filename = f"api_connection_error_{timestamp}.json"
            
            error_data = {
                "timestamp": timestamp,
                "url": url,
                "error_type": "ConnectionError",
                "error_message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω",
                "request_data_summary": {
                    "news_count": len(full_data['news']),
                    "candles_count": len(full_data['candles']),
                    "parameters": {
                        "p_threshold": full_data['p_threshold'],
                        "half_life_days": full_data['half_life_days'],
                        "max_days": full_data['max_days']
                    }
                }
            }
            
            with open(error_filename, 'w', encoding='utf-8') as f:
                json.dump(error_data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {error_filename}")
            
        except requests.exceptions.Timeout:
            print("‚ùå –¢–∞–π–º–∞—É—Ç - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            error_filename = f"api_timeout_error_{timestamp}.json"
            
            error_data = {
                "timestamp": timestamp,
                "url": url,
                "error_type": "Timeout",
                "error_message": "–¢–∞–π–º–∞—É—Ç - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
                "request_data_summary": {
                    "news_count": len(full_data['news']),
                    "candles_count": len(full_data['candles']),
                    "parameters": {
                        "p_threshold": full_data['p_threshold'],
                        "half_life_days": full_data['half_life_days'],
                        "max_days": full_data['max_days']
                    }
                }
            }
            
            with open(error_filename, 'w', encoding='utf-8') as f:
                json.dump(error_data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {error_filename}")
            
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            error_filename = f"api_exception_{timestamp}.json"
            
            error_data = {
                "timestamp": timestamp,
                "url": url,
                "error_type": "Exception",
                "error_message": str(e),
                "request_data_summary": {
                    "news_count": len(full_data['news']),
                    "candles_count": len(full_data['candles']),
                    "parameters": {
                        "p_threshold": full_data['p_threshold'],
                        "half_life_days": full_data['half_life_days'],
                        "max_days": full_data['max_days']
                    }
                }
            }
            
            with open(error_filename, 'w', encoding='utf-8') as f:
                json.dump(error_data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {error_filename}")
    
    return False

def show_json_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON —Ñ–∞–π–ª–∞"""
    print("=== –°–¢–†–£–ö–¢–£–†–ê JSON –§–ê–ô–õ–ê ===")
    
    with open('examples/json_samples/full_swagger_data.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    print("  {")
    print("    \"news\": [")
    print("      {")
    print("        \"publish_date\": \"2020-01-01 14:00:00\",")
    print("        \"title\": \"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏\",")
    print("        \"publication\": \"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–∞–Ω–∏—è\"")
    print("      },")
    print("      ...")
    print("    ],")
    print("    \"candles\": [")
    print("      {")
    print("        \"begin\": \"2025-04-16\",")
    print("        \"ticker\": \"SBER\",")
    print("        \"open\": 250.5,")
    print("        \"high\": 255.8,")
    print("        \"low\": 248.2,")
    print("        \"close\": 253.1,")
    print("        \"volume\": 15000000")
    print("      },")
    print("      ...")
    print("    ],")
    print("    \"artifacts_dir\": \"artifacts\",")
    print("    \"p_threshold\": 0.5,")
    print("    \"half_life_days\": 0.5,")
    print("    \"max_days\": 5")
    print("  }")

if __name__ == "__main__":
    show_json_structure()
    print("\n" + "="*50 + "\n")
    success = test_full_json_response()
    
    if success:
        print("\nüéâ JSON —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω API!")
        print("\nüí° –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:")
        print("1. API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–≤–µ—á–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
        print("2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º")
        print("3. –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞")
        print("4. –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Ñ–∏—á–∏ –ø–æ –¥–∞—Ç–∞–º –∏ —Ç–∏–∫–µ—Ä–∞–º")
        print("5. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–≤–µ—á–∏ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏")
        print("6. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
    else:
        print("\n‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
        print("uvicorn app:app --host 0.0.0.0 --port 8000")
