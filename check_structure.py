#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
"""
import os
from pathlib import Path

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_dirs = [
        'src/core',
        'src/ml', 
        'src/api',
        'src/utils',
        'datasets/raw',
        'datasets/processed',
        'datasets/output',
        'notebooks/colab',
        'notebooks/kaggle',
        'tests/integration',
        'tests/unit',
        'scripts/data_processing',
        'scripts/testing',
        'examples/json_samples',
        'examples/api_responses',
        'config',
        'docs',
        'artifacts'
    ]
    
    missing_dirs = []
    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            missing_dirs.append(dir_path)
    
    if missing_dirs:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏:")
        for dir_path in missing_dirs:
            print(f"  - {dir_path}")
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    required_files = [
        'src/core/news_nlp.py',
        'src/core/news_features.py',
        'src/core/auto_label_tickers.py',
        'src/core/infer_news_to_candles.py',
        'src/ml/nn_model.py',
        'src/ml/nn_data.py',
        'src/ml/train_news_ticker.py',
        'src/api/app.py',
        'config/requirements.txt',
        'config/docker-compose.yml',
        'config/Dockerfile',
        'README.md',
        'docs/README.md',
        'run.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"  - {file_path}")
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data_files = [
        'datasets/raw/test_news.csv',
        'datasets/raw/public_test_candles.csv',
        'examples/json_samples/full_swagger_data_fixed.json'
    ]
    
    missing_data = []
    for file_path in data_files:
        if not os.path.exists(file_path):
            missing_data.append(file_path)
    
    if missing_data:
        print("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        for file_path in missing_data:
            print(f"  - {file_path}")
    else:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    artifacts = [
        'artifacts/model.pt',
        'artifacts/vocab.json',
        'artifacts/tickers.json',
        'artifacts/lexicon.json'
    ]
    
    missing_artifacts = []
    for artifact in artifacts:
        if not os.path.exists(artifact):
            missing_artifacts.append(artifact)
    
    if missing_artifacts:
        print("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:")
        for artifact in missing_artifacts:
            print(f"  - {artifact}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    else:
        print("‚úÖ –í—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –ü–∞–ø–æ–∫: {len([d for d in os.listdir('.') if os.path.isdir(d)])}")
    
    total_files = 0
    for root, dirs, files in os.walk('.'):
        total_files += len(files)
    print(f"  –§–∞–π–ª–æ–≤: {total_files}")
    
    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û–±–Ω–æ–≤–∏—Ç–µ –ø—É—Ç–∏ –≤ –∫–æ–¥–µ: python scripts/data_processing/update_paths.py")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python run.py train")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API: python run.py api")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python run.py test")

if __name__ == "__main__":
    check_project_structure()
